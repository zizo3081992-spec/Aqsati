/**
 * @fileoverview Firestore Security Rules for Aqsati application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data,
 * and no access to other users' data. All data is nested under /users/{userId}.
 *
 * Data Structure:
 * The data is structured with clients and installments nested under each user's document:
 * /users/{userId}/clients/{clientId}
 * /users/{userId}/clients/{clientId}/installments/{installmentId}
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Clients and installments are owned by the user ID in the path.
 * - Data shape validation is relaxed to allow for prototyping.
 *
 * Denormalization for Authorization:
 *  - The rules rely on path-based ownership.
 *  - Data written to a client document under a specific user MUST have a matching `id` field.
 *  - This ensures that the document ID matches the client's `id` field, guaranteeing path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource (and that the resource exists).
     * @param {string} userId The user ID to compare against the resource data's owner ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the rule set for documents in the /users/{userId}/clients/{clientId} path.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can create a client with id 'XceDGlcKQib46QYblLoG' under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/XceDGlcKQib46QYblLoG if request.resource.data.id == 'XceDGlcKQib46QYblLoG'.
     * @deny (create) User 'SomeOtherUserId' cannot create a client under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/SomeClientId.
     * @allow (get, list) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can read and list clients under their own user id.
     * @deny (get, list) User 'SomeOtherUserId' cannot read or list clients under /users/Mjybirt6COhNBDhMga8QY4Ojp412.
     * @allow (update, delete) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can update and delete clients under their own user id.
     * @deny (update, delete) User 'SomeOtherUserId' cannot update or delete clients under /users/Mjybirt6COhNBDhMga8QY4Ojp412.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rule set for documents in the /users/{userId}/clients/{clientId}/installments/{installmentId} path.
     * @path /users/{userId}/clients/{clientId}/installments/{installmentId}
     * @allow (create) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can create an installment with id 'installment123' under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/client123/installments/installment123.
     * @deny (create) User 'SomeOtherUserId' cannot create an installment under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/client123/installments/installment123.
     * @allow (get, list) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can read and list installments under their own user id and a valid client id.
     * @deny (get, list) User 'SomeOtherUserId' cannot read or list installments under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/client123/installments/installment123.
     * @allow (update, delete) User 'Mjybirt6COhNBDhMga8QY4Ojp412' can update and delete installments under their own user id and a valid client id.
     * @deny (update, delete) User 'SomeOtherUserId' cannot update or delete installments under /users/Mjybirt6COhNBDhMga8QY4Ojp412/clients/client123/installments/installment123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/clients/{clientId}/installments/{installmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}